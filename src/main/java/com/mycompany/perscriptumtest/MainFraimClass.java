/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.perscriptumtest;

import com.solidsolutions.test.CandidatesClass;
import com.solidsolutions.test.CompaniesClass;
import com.solidsolutions.test.HelperClass;
import com.solidsolutions.test.LocationsClass;
import com.solidsolutions.test.SchemasClass;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author maxim
 */
public class MainFraimClass extends javax.swing.JFrame {

    ButtonGroup bgroupCreation;
    ButtonGroup bgroupSortSearchEdit;
    
    public static final int CHANGE_CHROME_BROWSER = 1;
    public static final int CHANGE_FIREFOX_BROWSER = 2;
    public static int CURRENT_BROWSER = 1;
    
    public HelperClass helperClass = new HelperClass();
    public final String appName = "«Solid Sulutions automatic site testing»";
    public String pathToLogFile;
    public String osName;
    public File fileToWriteLogsOfTesting;
    public File fileToWriteErrorLogOfTesting;
    public String dateTimeOfSession;
    public JFrame frame = null;
    public static JFrame frameStat = null;
    
    /**
     * Creates new form MainFraimClass
     */
    public MainFraimClass() {
        initComponents();
        bgroupCreation = new ButtonGroup();
        bgroupCreation.add(jRadioButtonAllCandidates);
        bgroupCreation.add(jRadioButtonRndCandidate);
        bgroupCreation.add(jRadioButtonShema);
        bgroupCreation.add(jRadioButtonLocations);
        bgroupCreation.add(jRadioButtonCreateCompany);
        bgroupCreation.add(jRadioButtonAllCreationTests);
        
        bgroupSortSearchEdit = new ButtonGroup();
        bgroupSortSearchEdit.add(jRadioButtonSorting);
        bgroupSortSearchEdit.add(jRadioButtonSearch);
        bgroupSortSearchEdit.add(jRadioButtonSpeedLoad);
        bgroupSortSearchEdit.add(jRadioButtonProfileEdit);
        fillData();
        //frame = new JFrame();
        frame = this;
        frame.setTitle("Solid Solutions site tester");
        setTextInInfoLabel();
        
       
        //JOptionPane.showMessageDialog(frame, "START");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jRadioButtonRndCandidate = new javax.swing.JRadioButton();
        jRadioButtonAllCandidates = new javax.swing.JRadioButton();
        jRadioButtonShema = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jRadioButtonLocations = new javax.swing.JRadioButton();
        jRadioButtonCreateCompany = new javax.swing.JRadioButton();
        jRadioButtonAllCreationTests = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonSearch = new javax.swing.JRadioButton();
        jRadioButtonSorting = new javax.swing.JRadioButton();
        jRadioButtonSpeedLoad = new javax.swing.JRadioButton();
        jRadioButtonProfileEdit = new javax.swing.JRadioButton();
        jButtonOtherTests = new javax.swing.JButton();
        jLabelResOther = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInformation = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButtonRndCandidate.setText("Create random candidate");

        jRadioButtonAllCandidates.setText("Create all 4 type of candidates");

        jRadioButtonShema.setText("Create Shema");

        jButton1.setText("Start test");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Result of work");

        jRadioButtonLocations.setText("Create Location");

        jRadioButtonCreateCompany.setText("Create Company");

        jRadioButtonAllCreationTests.setText("Run all tests above one by one automatically");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAllCreationTests)
                            .addComponent(jRadioButtonCreateCompany)
                            .addComponent(jRadioButtonLocations)
                            .addComponent(jRadioButtonRndCandidate)
                            .addComponent(jRadioButtonAllCandidates)
                            .addComponent(jRadioButtonShema))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jRadioButtonRndCandidate)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonAllCandidates)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonShema)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonLocations)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonCreateCompany)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonAllCreationTests)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Creation tests", jPanel1);

        jRadioButtonSearch.setText("Test Search");

        jRadioButtonSorting.setText("Test Sorting");

        jRadioButtonSpeedLoad.setText("Test speed of load");

        jRadioButtonProfileEdit.setText("Profile edit");

        jButtonOtherTests.setText("Start test");
        jButtonOtherTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOtherTestsActionPerformed(evt);
            }
        });

        jLabelResOther.setText("Result");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonSpeedLoad)
                    .addComponent(jRadioButtonSorting)
                    .addComponent(jRadioButtonSearch)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonOtherTests)
                            .addComponent(jRadioButtonProfileEdit))
                        .addGap(88, 88, 88)
                        .addComponent(jLabelResOther, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jRadioButtonSearch)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonSorting)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonSpeedLoad)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonProfileEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOtherTests)
                    .addComponent(jLabelResOther))
                .addGap(36, 36, 36))
        );

        jTabbedPane1.addTab("Other tests", jPanel2);

        jTextAreaInformation.setEditable(false);
        jTextAreaInformation.setColumns(5);
        jTextAreaInformation.setRows(5);
        jTextAreaInformation.setTabSize(5);
        jTextAreaInformation.setWrapStyleWord(true);
        jTextAreaInformation.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextAreaInformation);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Info", jPanel3);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String message = "";
        if (jRadioButtonRndCandidate.isSelected()) {
            message = "Start random candidate creation test";
            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: " + message);   
            Thread t = new Thread() {
                public void run() {
                    CandidatesClass candidatesClass = new CandidatesClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        candidatesClass.createCandidate();
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
            t.start();
        } else if (jRadioButtonAllCandidates.isSelected()) {
            message = "Start ALL 4 candidates creation test";
            CandidatesClass[] candidatesClassArr = new CandidatesClass[4];
            Thread t = new Thread() {
                public void run() {   
                    for (int i = 0; i < 4; i++) {
                        candidatesClassArr[i] = new CandidatesClass(pathToLogFile, osName, (i + 1));
                        try {
                            candidatesClassArr[i].createCandidate();
                        } catch (Exception | Error ex) {
                            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                        }
                    }
                }
            };
            t.start();
        } else if (jRadioButtonShema.isSelected()) {
            message = "Start Shema creation test";            
            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: " + message);   
            Thread t = new Thread() {
                public void run() {
                    SchemasClass schemasClass = new SchemasClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        schemasClass.createSchema();                    
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
            t.start();
        } else if (jRadioButtonLocations.isSelected()) {
            message = "Start Location creation test";            
            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: " + message);   
            Thread t = new Thread() {
                public void run() {
                    LocationsClass locationsClass = new LocationsClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        locationsClass.createLocation();
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
            t.start();
        } else if (jRadioButtonCreateCompany.isSelected()) {
            message = "Start Company creation test";            
            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: " + message);   
            Thread t = new Thread() {
                public void run() {
                    CompaniesClass companiesClass = new CompaniesClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        companiesClass.createCompany();
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
            t.start();
        } else if (jRadioButtonAllCreationTests.isSelected()) {
            message = "Start All creation tests together";            
            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: " + message);   
            startAllCreationTests();
        } else {
            message = "Empy choice";
        }//
        jLabel1.setText(message);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(frame, "Solid Solutions site tester. \nAll rights reserved.");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButtonOtherTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOtherTestsActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonSearch.isSelected()) {
            jLabelResOther.setText("Search");
        } else if (jRadioButtonSorting.isSelected()) {
            jLabelResOther.setText("Sorting");
        } else if (jRadioButtonSpeedLoad.isSelected()) {
            jLabelResOther.setText("Speed load");
        } else if (jRadioButtonProfileEdit.isSelected()) {
            jLabelResOther.setText("Profile edit");
        }
    }//GEN-LAST:event_jButtonOtherTestsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFraimClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFraimClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFraimClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFraimClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFraimClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonOtherTests;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelResOther;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonAllCandidates;
    private javax.swing.JRadioButton jRadioButtonAllCreationTests;
    private javax.swing.JRadioButton jRadioButtonCreateCompany;
    private javax.swing.JRadioButton jRadioButtonLocations;
    private javax.swing.JRadioButton jRadioButtonProfileEdit;
    private javax.swing.JRadioButton jRadioButtonRndCandidate;
    private javax.swing.JRadioButton jRadioButtonSearch;
    private javax.swing.JRadioButton jRadioButtonShema;
    private javax.swing.JRadioButton jRadioButtonSorting;
    private javax.swing.JRadioButton jRadioButtonSpeedLoad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaInformation;
    // End of variables declaration//GEN-END:variables

    private void fillData() {
        String fileName = "";
        String fileNameERRORS = "";
        dateTimeOfSession = helperClass.getDateInStringForWindowsLinux(); 
        
        osName = System.getProperty("os.name");
        //JOptionPane.showMessageDialog(frame, "osName=" + osName);
        File theDirectoryForLogFiles = null;
        if (osName.contains("Linux")) {
            pathToLogFile = "./logs/";            
            System.setProperty("webdriver.chrome.driver", "/usr/bin/chromedriver");      
            System.setProperty("webdriver.gecko.driver", "/usr/bin/geckodriver");            
        } else if (osName.contains("Windows")) {
            pathToLogFile = "C:\\users\\public\\documents\\logs\\";            
            System.setProperty("webdriver.chrome.driver", "C:\\users\\public\\documents\\chromedriver.exe");
            System.setProperty("webdriver.gecko.driver", "C:\\users\\public\\documents\\geckodriver.exe");            
        } else {
            pathToLogFile = "./";
        }
        
        try {
            theDirectoryForLogFiles = new File(pathToLogFile);
            theDirectoryForLogFiles.mkdirs();
            //System.out.println("Create folder for log files at path " + pathToLogFile);
        } catch (Exception ex) {
            //System.out.println("ERROR with creation of the folder for log files at path " + pathToLogFile);            
        }        
        
        fileName = pathToLogFile + "mainApplicationLog_" + dateTimeOfSession + ".txt";
        fileNameERRORS = pathToLogFile + "mainApplicationLog_ERRORS_" + dateTimeOfSession + ".txt";        
        
        try {
            fileToWriteLogsOfTesting = new File(fileName);
            fileToWriteErrorLogOfTesting = new File(fileNameERRORS);
            //System.out.println("Path to logfile:" + fileName);
        } catch (Exception exx) {
            //System.out.println(exx.getMessage());
            //System.out.println("Error file creation, test log will be only in terminal");
        }
        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: Start");   
    }

    private void startAllCreationTests() {
        CandidatesClass[] candidatesClassArr = new CandidatesClass[4];
        Thread tCandidates = new Thread() {
                public void run() {
                    for (int i = 0; i < 4; i++) {
                        candidatesClassArr[i] = new CandidatesClass(pathToLogFile, osName, (i + 1));
                        try {
                            candidatesClassArr[i].createCandidate();
                        } catch (Exception | Error ex) {
                            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                            helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                        }
                    }
                }
            };
        tCandidates.start();    
    
        Thread tShema = new Thread() {
                public void run() {
                    SchemasClass schemasClass = new SchemasClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        schemasClass.createSchema();                    
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
        tShema.start();    
            
        Thread tLocations = new Thread() {
                public void run() {
                    LocationsClass locationsClass = new LocationsClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        locationsClass.createLocation();
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
        tLocations.start();
        
        Thread tCompany = new Thread() {
                public void run() {
                    CompaniesClass companiesClass = new CompaniesClass(pathToLogFile, osName);                    
                    try {
                        String[] strarr = new String[2];
                        companiesClass.createCompany();
                    } catch (Exception | Error ex) {
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, "Work: MainFraimClass ERROR!");
                        helperClass.printToFileAndConsoleInformation(fileToWriteLogsOfTesting, ex.getMessage());
                    }
                }
            };
            tCompany.start();
    }

    private void setTextInInfoLabel() {
        
        StringBuffer strBuffer = new StringBuffer();
        strBuffer.append("To use this application make sure GoogleChromDriver and GeckoDriver are placed in the folder ");
        if (osName.contains("Linux")) {
            strBuffer.append("/usr/bin/");
        } else if (osName.contains("Windows")) {
            strBuffer.append("C:\\users\\public\\documents\\");
        }
        strBuffer.append(".\nMake sure that the version of the Chromedriver matches the version of the Chrome browser you have installed.\n");
        strBuffer.append("Log files will be saved to the folder ");
        if (osName.contains("Linux")) {
            strBuffer.append("/logs/.");
        } else if (osName.contains("Windows")) {
            strBuffer.append("C:\\users\\public\\documents\\logs.");
        }
        jTextAreaInformation.setLineWrap(true);
        jTextAreaInformation.setText(strBuffer.toString());
    }
}
